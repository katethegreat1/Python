#   第5课  For 循环 & While 循环

for i in [1, 2, 3, 4, 5]:
    print(i)

#有一群数字在排队办业务，也就是列表[1,2,3,4,5]
#它们中的每一个被叫到号的时候(for i in)，就轮流进去一个空房间办业务
#每一个数字进去房间之后，都对计算机说：“喂，我要办这个业务：帮忙把我自己打印出来”，也就是print(i)
#然后计算机忠实的为每一个数字提供了打印服务，将1,2,3,4,5都打印在了屏幕上

for i in (1,2,3,4,5):
   print(i)

for i in {1, 2, 3, 4, 5}:
    print(i)

#   for循环的3个要点即是: 1.空房间；2.一群等着办业务的人；3.业务流程
#空房间的学名叫【元素】（item），你可以把它当成是一个变量。那么首先，我们需要给房间取一个名字，也就是“变量名”。
#为什么我总是用i？因为英文是item，所以i是常用名嘛。但其实你给这个房间取什么名字都行。


for i in [1,2]:
    print(i)

for number in [1,2]:
    print(number)

for LOVE in [1,2]:
    print(LOVE)


for i in [1,2,3,4,5]:
    print(i)

print('事情全部办完了！现在留在空房间里的人是谁？')
print(i)

#原来，业务结束之后，最后一个走进去的5留在了房间里，被打印了出来。

dict = {'日本':'东京','英国':'伦敦','法国':'巴黎'}
for i in dict:
    print(i)

    #我们用print(i)把“空房间”i打印了出来，发现i会逐个接待字典中的每一个【键】

for i in '吴承恩':
    print(i)

    #字典、列表和字符串'吴承恩'都是一群排队办业务的人
    #而整数、浮点数是不属于“一群排队办业务的人”的，如果把它们放在for循环里，代码会报错。

for i in range(3):
    print('我很棒')

for i in range(11):
    print('书恒走的第' + str(i) + '天想他')

    #我们来实战一下：请你用for循环完成1到100的整数分别乘以5的计算，并打印出来.

for i in range(1,101):
    print(i*5)

    #“办事流程”的学名是【for子句】。格式是【冒号】后另起一行，【缩进】写命令。

    d = {'小明': '醋', '小红': '油', '小白': '盐', '小张': '米'}
    print(d['小明'])
    print(d['小红'])
    print(d['小白'])
    print(d['小张'])

# ！！！ define d first!!!
d = {'小明': '醋', '小红': '油', '小白': '盐', '小张': '米'}
for i in d:
    print(d[i])                  # NOT print (i) / print([i])


#   !!!!!!VIP!!!!!!!
a = 0
while a < 5:
    a = a + 1
    print(a)    #12345    print (a+1) as a
    print('I love you')

a = 0
while a < 5:
    print(a)  # 01234      print a  所以 有几个 a 就有几个(a+1)
    a = a + 1
    print('I love you')


a = 0
while a < 5:
    a = a + 1
print(a)         # wrong  # 5

#a从0开始，每次循环都加1，当a被加到5的时候，就不会满足循环的条件哨卡就不会通过，
# 于是循环就会结束。最会打印a。
#  有缩进的时候，print(a)也是循环中的“办事流程”，会将数字逐一打印。
#  没有缩进的时候，循环中的“办事流程”就只有做加法，print(a)也就只会打印循环结束时的最后一个数字。


a = 0                #先定义变量a，并赋值
while a < 5:         #设定一个放行条件：a要小于5，才能办事
    a = a + 1  # 满足条件时，就办事：将a+1
    print(a)   # 继续办事：将a+1的结果打印出来



# while循环有2个要点：1.放行条件；2.办事流程。
# 只要a<5这个条件成立，就不停地办事（把a+1的结果打印出来），直到条件不成立，办事流程就停止。

man = ''  # 注：''代表空字符串
while man != '有':  #注：!=代表不等于
    man = input('有没有愿意为小龙女死的男人？没有的话就不能出古墓。')
print('小龙女可以出古墓门下山啦~')


#        第1行代码：定义了变量man为空的字符串。
# 使用变量前要先定义变量并为变量赋值，下面我们还会继续用到变量man。
#        第2行代码：while后面有一个条件，
# 当这个条件被满足时，即man != '有'时，放行、办事。开始执行循环内部代码，即第3行的代码，开始询问。
#        第3行代码：询问现在有男人愿意为小龙女死吗？输入完信息后，回到第2行代码，重新判断条件真假。
# 直到条件被判断为假，即man == '有'，while循环才结束。
#        第4行代码：while 循环结束后的代码，也是循环外部的代码。
# 因为当有男人愿意为小龙女死的时候，while 后面的条件就为假，此时，程序会结束循环，去运行第五行代码。

# Practice： 你家的大门是密码门，密码是你的生日816。当输错密码错误的时候，会提示“请尝试输入密码：”。
# 直到密码输入正确，就会提示“欢迎回家！”。

password = ''  # 变量password用来保存输入的密码
while password!='816':                 # 注意 不是 816
    password=input('尝试输入密码：')
print('欢迎回家！')

a = 0  # 定义了一个变量a
while a < 5:  # 当a小于5的时候，就自动执行后续缩进部分的语句
    print('现在a的值是：' + str(a)) #加一个print看看现在的a是多少
    a = a + 1  # 每执行一次循环，变量a的值都加1
    print('加1后a的值是：' + str(a)) #加一个print看看加1后的a是多少
print(a)

# Thoughts：

a=1
while a<5:
    print(a)     #1      4
    a=a+1
    print(a)     #2      5
    a=a+2
    print(a)     #4      7
print(a)     #7


# Practice：
for i in range(1,101):
    print(i*5)

# Change to While

# 做错啦！！！
i=1
while i<101:
    i=i+1
    print(i*5)    # 10， 15， 20...505

#正确答案：
i=1
while i<101:
    print(i*5)       # 5， 10， 15...500
    i=i+1


# for循环和whlie循环最大的区别在于【循环的工作量是否确定】，
# for循环就像空房间依次办理业务，直到把【所有工作做完】才下班。
# 但while循环就像哨卡放行，【满足条件就一直工作】，直到不满足条件就关闭哨卡。

# 所以说，当我们【工作量确定】的时候，我们就可以让for循环来完成重复性工作。
# 反之，要【工作量不确定时】可以让while循环来工作：


# 不过有一种情况for循环和while循环都可以解决问题，那就是【把一件事情做N遍】：

#用for循环把诗句打印3遍
for i in range(1,4) :
    print('明日复明日，明日何其多。')

#用while循环把诗句打印3遍
j = 1
while j<4 :
    print ('明日何其多，明日何其多。')
    j =j+1
    print (j)

# or
j = 1
while j<4 :
    j =j+1
    print('明日何其多，明日何其多。')
    print(j)

# HW 1

a = [1, 2, 3]
b = [4, 5, 6]
for i in a:
    for j in b:
        print('%s VS %s' % (i, j))

print('''答案解析："%s"表示格化式一个对象为字符，所以本题的打印格式为“i VS j”；
在循环中，先遍历a，取1，然后遍历b，取4，5，6，得到：
1 VS 4
1 VS 5
1 VS 6
继续遍历a，取2，然后遍历b，取4，5，6，得到：
2 VS 4
2 VS 5
2 VS 6
继续遍历a，取3，然后遍历b，取4，5，6，得到：
3 VS 4
3 VS 5
3 VS 6
''')

print('''请你用不同的循环方式来帮小美实现“打印1-7，但是不要4”这个愿望。''')

for i in range (1,8):           # 别忘了冒号哦！！！
    if i!=4:
        print(i)


i=1
while i < 8:
    if i !=4:
        print(i)
        # i=i+1        (#wrong!!! 不要缩进！！！)
    i=i+1


# or （Better!!!）

# while 循环
n = 0
while n < 7:
    n = n+1
    if n != 4:  # 当num != 4，执行打印语句；等于4时不打印。
        print(n)

print('''练习目标
通过这个练习，你会尝试用循环来解决生活中的问题，并了解一种新的列表方法。

练习要求
小明、小红、小刚是同班同学，且坐在同一排，分别坐在第一位、第二位、第三位。
由于他们的身高都差不多，所以，老师计划让他们三个轮流坐在第一位。
每次换座位的时候，第一位变第三位，后面两位都往前一位。

方法1：append()函数

可结合循环和append()函数，让列表发生3次变化，每次都打印出来，如下：

students = ['小明','小红','小刚']
students = ['小红','小刚','小明']
students = ['小刚','小明','小红']

方法1-参考代码

参考代码中用的是 for循环，当然，while循环 也是可以的。
感兴趣的同学，可以两者都试试，然后对比一二。


方法2：pop()函数

我们先介绍一下列表中的pop()函数，用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。
可以将其理解为提取和删除的融合：①提取：取到元素，对列表没有影响；②删除：删除列表的元素。
而移除，则是同时做到取到元素，并且删除列表中的元素。


方法2-参考代码

相信你已经用了新学的方法完成了代码。可以发现：代码从6行减为5行，
虽然仅仅1行代码的差别，还不能很好地体现“简化”代码的思想，但这是一种必备的编程思维。
当你发现要实现某功能要用较多代码实现，最先做的不是埋头打代码，而是找找是否有更好、更简洁的解决方法。''')

students = ['小明','小红','小刚']
for i in range(3):       # 或者写成 for in in students:
    student1 = students.pop(0)  # 运用pop()函数，同时完成提取和删除。
    students.append(student1)  # 将移除的student1安排到最后一个座位。
    print(students)



num=[1,2,3]
for i in num:
    num2=num.pop(0)
    num.append(num2)
    print(num)